package Permissions;

import java.security.Principal;

import org.jboss.seam.security.permission.PermissionCheck;
import org.jboss.seam.security.Role;

import org.gluu.oxtrust.model.GluuOrganization;
import org.gluu.oxtrust.model.GluuAppliance;

rule AccessAttributeInventory
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "attribute", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessPersonInventory
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "person", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessGroupInventory
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "group", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessTrustManagement
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "trust", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessConfiguration
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "configuration", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessLogFile
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "log", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessImportPerson
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "import", action == "person", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessWhitePagesProfile
  no-loop
  activation-group "permissions"
when
  org: GluuAppliance()
  check: PermissionCheck(target == org, action == "whitePagesEnabled", granted == false)
  (GluuAppliance((whitePagesEnabled != null) && (whitePagesEnabled.booleanValue == true)) && Role((name == "owner") || (name == "manager") || (name == "user")))
then
  check.grant();
end

rule AccessProfileManagement
  no-loop
  activation-group "permissions"
when
  org: GluuAppliance()
  check: PermissionCheck(target == org, action == "profile_management", granted == false)
  (GluuAppliance((profileManagment != null) && (profileManagment.booleanValue == true)) && Role((name == "owner") || (name == "manager") || (name == "user")))
then
  check.grant();
end

rule AccessPersonProfile
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "profile", action == "access", granted == false)
  Role((name == "owner") || (name == "manager") || (name == "user"))
then
  check.grant();
end

rule AccessRegistrationLinks
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "registrationLinks", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end
rule AccessSelfTest
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "scim_test", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessScimConfiguration
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "scim", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessClientInventory
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "client", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessScopeInventory
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "scope", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessOxAuthManagement
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "oxauth", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessUmaConfiguration
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "uma", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessOxPushInventory
  no-loop
  activation-group "permissions"
when
  check: PermissionCheck(target == "oxpush", action == "access", granted == false)
  Role((name == "owner") || (name == "manager"))
then
  check.grant();
end

rule AccessLinktrackConfiguration
  no-loop
  activation-group "permissions"
when
  org: GluuOrganization()
  check: PermissionCheck(target == org, action == "linktrack", granted == false)
  (GluuOrganization((oxRegistrationConfiguration != null) && (oxRegistrationConfiguration.invitationCodesManagementEnabled == true)) && Role((name == "owner") || (name == "manager")))
then
  check.grant();
end

rule RegistrationLinksModeration
  no-loop
  activation-group "permissions"
when
  org: GluuOrganization()
  check: PermissionCheck(target == org, action == "registrationLinksModeration", granted == false)
  (GluuOrganization((oxRegistrationConfiguration != null) && (oxRegistrationConfiguration.invitationCodesManagementEnabled == true)))
then
  check.grant();
end

rule RegistrationLinksManagement
  no-loop
  activation-group "permissions"
when
  org: GluuOrganization()
  check: PermissionCheck(target == org, action == "registrationLinksManagement", granted == false)
  (GluuOrganization((oxRegistrationConfiguration != null) && (oxRegistrationConfiguration.invitationCodesManagementEnabled == true)) && Role((name == "owner") || (name == "manager")))
then
  check.grant();
end