/*
 * oxTrust is available under the MIT License (2008). See http://opensource.org/licenses/MIT for full text.
 *
 * Copyright (c) 2014, Gluu
 */
// Generated by ANTLR 4.5.2
package org.gluu.oxtrust.service.antlr.scimFilter.antlr4;
import org.antlr.v4.runtime.tree.ParseTreeListener;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link ScimFilterParser}.
 */
public interface ScimFilterListener extends ParseTreeListener {
	/**
	 * Enter a parse tree produced by {@link ScimFilterParser#scimFilter}.
	 * @param ctx the parse tree
	 */
	void enterScimFilter(ScimFilterParser.ScimFilterContext ctx);
	/**
	 * Exit a parse tree produced by {@link ScimFilterParser#scimFilter}.
	 * @param ctx the parse tree
	 */
	void exitScimFilter(ScimFilterParser.ScimFilterContext ctx);
	/**
	 * Enter a parse tree produced by the {@code ATTR_PR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void enterATTR_PR(ScimFilterParser.ATTR_PRContext ctx);
	/**
	 * Exit a parse tree produced by the {@code ATTR_PR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void exitATTR_PR(ScimFilterParser.ATTR_PRContext ctx);
	/**
	 * Enter a parse tree produced by the {@code LBRAC_EXPR_RBRAC}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void enterLBRAC_EXPR_RBRAC(ScimFilterParser.LBRAC_EXPR_RBRACContext ctx);
	/**
	 * Exit a parse tree produced by the {@code LBRAC_EXPR_RBRAC}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void exitLBRAC_EXPR_RBRAC(ScimFilterParser.LBRAC_EXPR_RBRACContext ctx);
	/**
	 * Enter a parse tree produced by the {@code ATTR_OPER_EXPR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void enterATTR_OPER_EXPR(ScimFilterParser.ATTR_OPER_EXPRContext ctx);
	/**
	 * Exit a parse tree produced by the {@code ATTR_OPER_EXPR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void exitATTR_OPER_EXPR(ScimFilterParser.ATTR_OPER_EXPRContext ctx);
	/**
	 * Enter a parse tree produced by the {@code EXPR_OR_EXPR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void enterEXPR_OR_EXPR(ScimFilterParser.EXPR_OR_EXPRContext ctx);
	/**
	 * Exit a parse tree produced by the {@code EXPR_OR_EXPR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void exitEXPR_OR_EXPR(ScimFilterParser.EXPR_OR_EXPRContext ctx);
	/**
	 * Enter a parse tree produced by the {@code EXPR_OPER_EXPR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void enterEXPR_OPER_EXPR(ScimFilterParser.EXPR_OPER_EXPRContext ctx);
	/**
	 * Exit a parse tree produced by the {@code EXPR_OPER_EXPR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void exitEXPR_OPER_EXPR(ScimFilterParser.EXPR_OPER_EXPRContext ctx);
	/**
	 * Enter a parse tree produced by the {@code NOT_EXPR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void enterNOT_EXPR(ScimFilterParser.NOT_EXPRContext ctx);
	/**
	 * Exit a parse tree produced by the {@code NOT_EXPR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void exitNOT_EXPR(ScimFilterParser.NOT_EXPRContext ctx);
	/**
	 * Enter a parse tree produced by the {@code EXPR_AND_EXPR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void enterEXPR_AND_EXPR(ScimFilterParser.EXPR_AND_EXPRContext ctx);
	/**
	 * Exit a parse tree produced by the {@code EXPR_AND_EXPR}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void exitEXPR_AND_EXPR(ScimFilterParser.EXPR_AND_EXPRContext ctx);
	/**
	 * Enter a parse tree produced by the {@code ATTR_OPER_CRITERIA}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void enterATTR_OPER_CRITERIA(ScimFilterParser.ATTR_OPER_CRITERIAContext ctx);
	/**
	 * Exit a parse tree produced by the {@code ATTR_OPER_CRITERIA}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void exitATTR_OPER_CRITERIA(ScimFilterParser.ATTR_OPER_CRITERIAContext ctx);
	/**
	 * Enter a parse tree produced by the {@code LPAREN_EXPR_RPAREN}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void enterLPAREN_EXPR_RPAREN(ScimFilterParser.LPAREN_EXPR_RPARENContext ctx);
	/**
	 * Exit a parse tree produced by the {@code LPAREN_EXPR_RPAREN}
	 * labeled alternative in {@link ScimFilterParser#expression}.
	 * @param ctx the parse tree
	 */
	void exitLPAREN_EXPR_RPAREN(ScimFilterParser.LPAREN_EXPR_RPARENContext ctx);
	/**
	 * Enter a parse tree produced by {@link ScimFilterParser#criteria}.
	 * @param ctx the parse tree
	 */
	void enterCriteria(ScimFilterParser.CriteriaContext ctx);
	/**
	 * Exit a parse tree produced by {@link ScimFilterParser#criteria}.
	 * @param ctx the parse tree
	 */
	void exitCriteria(ScimFilterParser.CriteriaContext ctx);
	/**
	 * Enter a parse tree produced by {@link ScimFilterParser#operator}.
	 * @param ctx the parse tree
	 */
	void enterOperator(ScimFilterParser.OperatorContext ctx);
	/**
	 * Exit a parse tree produced by {@link ScimFilterParser#operator}.
	 * @param ctx the parse tree
	 */
	void exitOperator(ScimFilterParser.OperatorContext ctx);
}